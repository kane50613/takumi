// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AlignItems } from "./AlignItems";
import type { ColorInput } from "./ColorInput";
import type { FlexDirection } from "./FlexDirection";
import type { FontWeight } from "./FontWeight";
import type { Gap } from "./Gap";
import type { JustifyContent } from "./JustifyContent";
import type { ObjectFit } from "./ObjectFit";
import type { Position } from "./Position";
import type { SidesValue } from "./SidesValue";
import type { TextAlign } from "./TextAlign";
import type { ValuePercentageAuto } from "./ValuePercentageAuto";

/**
 * Main styling structure that contains all layout and visual properties.
 *
 * This structure combines both layout properties (like width, height, padding)
 * and inheritable properties (like font settings, colors) that can be passed
 * down to child elements.
 */
export type Style = { 
/**
 * Width of the element
 */
width: ValuePercentageAuto, 
/**
 * Height of the element
 */
height: ValuePercentageAuto, 
/**
 * Internal spacing around the element's content
 */
padding: SidesValue<ValuePercentageAuto>, 
/**
 * External spacing around the element
 */
margin: SidesValue<ValuePercentageAuto>, 
/**
 * Positioning offset from the element's normal position
 */
inset: SidesValue<ValuePercentageAuto>, 
/**
 * Direction of flex layout (row or column)
 */
flex_direction: FlexDirection, 
/**
 * How flex items are aligned along the main axis
 */
justify_content?: JustifyContent, 
/**
 * How flex items are aligned along the cross axis
 */
align_items?: AlignItems, 
/**
 * Positioning method (relative, absolute, etc.)
 */
position: Position, 
/**
 * Spacing between flex items
 */
gap: Gap, 
/**
 * How much the element should grow relative to other flex items
 */
flex_grow: number, 
/**
 * Width of the element's border
 */
border_width: SidesValue<ValuePercentageAuto>, 
/**
 * How images should be fitted within their container
 */
object_fit: ObjectFit, 
/**
 * Element's background color
 */
background_color?: ColorInput, 
/**
 * Color of the element's border
 */
border_color?: ColorInput, 
/**
 * Text color for child text elements
 */
color?: ColorInput, 
/**
 * Font size in pixels for text rendering
 */
font_size?: number, 
/**
 * Font family name for text rendering
 */
font_family?: string, 
/**
 * Line height multiplier for text spacing
 */
line_height?: number, 
/**
 * Font weight for text rendering
 */
font_weight?: FontWeight, 
/**
 * Maximum number of lines for text before truncation
 */
max_lines?: number, 
/**
 * Corner radius for rounded borders in pixels
 */
border_radius?: SidesValue<ValuePercentageAuto>, 
/**
 * Text alignment within the element
 */
text_align?: TextAlign, };
