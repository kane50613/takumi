name: Takumi NAPI Core CI

env:
  DEBUG: napi:*
  APP_NAME: core
  CARGO_INCREMENTAL: "0"

permissions:
  contents: write
  id-token: write

on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: bun run build --target aarch64-apple-darwin
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            build: bun run build --target aarch64-unknown-linux-gnu
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            build: bun run build --target aarch64-unknown-linux-musl -x
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: bun run build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: bun run build --target x86_64-unknown-linux-musl -x

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            takumi-napi-core/target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Install cargo-zigbuild
        if: ${{ contains(matrix.settings.target, 'musl') }}
        run: pip install cargo-zigbuild

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        working-directory: takumi-napi-core
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            takumi-napi-core/${{ env.APP_NAME }}.*.node
            takumi-napi-core/index.js
            takumi-napi-core/index.d.ts
          if-no-files-found: error

  test-bindings:
    name: Test ${{ matrix.settings.target }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build heleprs
        run: |
          cd takumi-helpers
          bun run build
          cd ../takumi-napi-core

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: takumi-napi-core

      - name: List packages
        run: ls -R .
        working-directory: takumi-napi-core

      - name: Test bindings
        if: ${{ !contains(matrix.settings.target, 'musl') }}
        working-directory: takumi-napi-core
        run: bun test

      - name: Test bindings in Alpine (musl)
        if: contains(matrix.settings.target, 'musl')
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace/takumi-napi-core \
            oven/bun:alpine bun test

  version-check:
    runs-on: ubuntu-latest
    outputs:
      version-exists: ${{ steps.check.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

      - name: Check if version exists
        id: check
        working-directory: takumi-napi-core
        run: |
          package=$(jq -r '"\(.name)@\(.version)"' package.json)
          if npm view "$package" version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  publish:
    needs: [build, test-bindings, version-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.version-check.outputs.version-exists == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: takumi-napi-core/artifacts

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - uses: actions/setup-node@v4

      - name: Publish
        working-directory: takumi-napi-core
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          bun artifacts
          cp artifacts/bindings-x86_64-unknown-linux-gnu/index.* .
          npm publish --access public --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
