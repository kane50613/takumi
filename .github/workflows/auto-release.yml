name: Auto Release

permissions:
  id-token: write

on:
  push:
    branches: [master]
    paths:
      - "takumi/Cargo.toml"

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(cargo pkgid -p takumi | cut -d "#" -f2)
          PREVIOUS_VERSION=$(git show HEAD~1:takumi/Cargo.toml | grep '^version = ' | cut -d'"' -f2 | head -n 1 || echo "0.0.0")

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi

  publish-to-crate-io:
    name: Publish to crate.io
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish -p takumi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-takumi-helpers:
    name: Publish takumi-helpers to npm
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - uses: actions/setup-node@v4

      - name: Build
        working-directory: takumi-helpers
        run: bun run build

      - name: Publish
        working-directory: takumi-helpers
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-version, publish-takumi-helpers, publish-to-crate-io]
    if: needs.check-version.outputs.version_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ needs.check-version.outputs.new_version }} -m "Release v${{ needs.check-version.outputs.new_version }}"
          git push origin v${{ needs.check-version.outputs.new_version }}

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="v${{ needs.check-version.outputs.new_version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" ${PREVIOUS_TAG}..HEAD~1)
          fi

          # Set multiline output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          release_name: Release v${{ needs.check-version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
