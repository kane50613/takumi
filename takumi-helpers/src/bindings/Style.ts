// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AlignItems } from "./AlignItems";
import type { BoxShadowInput } from "./BoxShadowInput";
import type { ColorInput } from "./ColorInput";
import type { Display } from "./Display";
import type { FlexDirection } from "./FlexDirection";
import type { FlexWrap } from "./FlexWrap";
import type { FontWeight } from "./FontWeight";
import type { Gap } from "./Gap";
import type { GridAutoFlow } from "./GridAutoFlow";
import type { GridLine } from "./GridLine";
import type { GridTrackSize } from "./GridTrackSize";
import type { JustifyContent } from "./JustifyContent";
import type { LengthUnit } from "./LengthUnit";
import type { ObjectFit } from "./ObjectFit";
import type { Position } from "./Position";
import type { SidesValue } from "./SidesValue";
import type { TextAlign } from "./TextAlign";
import type { TextOverflow } from "./TextOverflow";
import type { TrackSizingFunction } from "./TrackSizingFunction";

/**
 * Main styling structure that contains all layout and visual properties.
 *
 * This structure combines both layout properties (like width, height, padding)
 * and inheritable properties (like font settings, colors) that can be passed
 * down to child elements.
 */
export type Style = { 
/**
 * Display algorithm to use for the element
 */
display: Display, 
/**
 * Width of the element
 */
width: LengthUnit, 
/**
 * Height of the element
 */
height: LengthUnit, 
/**
 * Max width of the element
 */
max_width: LengthUnit, 
/**
 * Max height of the element
 */
max_height: LengthUnit, 
/**
 * Min width of the element
 */
min_width: LengthUnit, 
/**
 * Min height of the element
 */
min_height: LengthUnit, 
/**
 * Aspect ratio of the element
 */
aspect_ratio?: number, 
/**
 * Internal spacing around the element's content
 */
padding: SidesValue<LengthUnit>, 
/**
 * External spacing around the element
 */
margin: SidesValue<LengthUnit>, 
/**
 * Positioning offset from the element's normal position
 */
inset: SidesValue<LengthUnit>, 
/**
 * Direction of flex layout (row or column)
 */
flex_direction: FlexDirection, 
/**
 * How flex items are aligned along the main axis
 */
justify_content?: JustifyContent, 
/**
 * How flex items are aligned along the cross axis when there's extra space
 */
align_content?: JustifyContent, 
/**
 * How grid items are aligned along the inline (row) axis
 */
justify_items?: AlignItems, 
/**
 * How flex items are aligned along the cross axis
 */
align_items?: AlignItems, 
/**
 * How flex items should wrap
 */
flex_wrap: FlexWrap, 
/**
 * The initial size of the flex item before growing or shrinking
 */
flex_basis: LengthUnit, 
/**
 * Positioning method (relative, absolute, etc.)
 */
position: Position, 
/**
 * Spacing between flex items or grid tracks
 */
gap: Gap, 
/**
 * How much the element should grow relative to other flex items (0.0 = no growth)
 */
flex_grow: number, 
/**
 * How much the element should shrink relative to other flex items (0.0 = no shrinking)
 */
flex_shrink: number, 
/**
 * Width of the element's border on each side
 */
border_width: SidesValue<LengthUnit>, 
/**
 * How images should be fitted within their container
 */
object_fit: ObjectFit, 
/**
 * Element's background color
 */
background_color?: ColorInput, 
/**
 * Box shadow for the element
 */
box_shadow?: BoxShadowInput, 
/**
 * Controls the size of implicitly-created grid columns
 */
grid_auto_columns?: Array<GridTrackSize>, 
/**
 * Controls the size of implicitly-created grid rows
 */
grid_auto_rows?: Array<GridTrackSize>, 
/**
 * Controls how auto-placed items are inserted in the grid
 */
grid_auto_flow?: GridAutoFlow, 
/**
 * Specifies a grid item's size and location within the grid column
 */
grid_column?: GridLine, 
/**
 * Specifies a grid item's size and location within the grid row
 */
grid_row?: GridLine, 
/**
 * Defines the line names and track sizing functions of the grid columns
 */
grid_template_columns?: Array<TrackSizingFunction>, 
/**
 * Defines the line names and track sizing functions of the grid rows
 */
grid_template_rows?: Array<TrackSizingFunction>, 
/**
 * How text should be overflowed
 */
text_overflow?: TextOverflow, 
/**
 * Color of the element's border
 */
border_color?: ColorInput, 
/**
 * Text color for child text elements
 */
color?: ColorInput, 
/**
 * Font size in pixels for text rendering
 */
font_size?: LengthUnit, 
/**
 * Font family name for text rendering
 */
font_family?: string, 
/**
 * Line height multiplier for text spacing
 */
line_height?: LengthUnit, 
/**
 * Font weight for text rendering
 */
font_weight?: FontWeight, 
/**
 * Maximum number of lines for text before truncation
 */
line_clamp?: number, 
/**
 * Corner radius for rounded borders in pixels
 */
border_radius?: SidesValue<LengthUnit>, 
/**
 * Text alignment within the element
 */
text_align?: TextAlign, 
/**
 * Letter spacing for text rendering
 * Value is measured in EM units
 */
letter_spacing?: LengthUnit, };
